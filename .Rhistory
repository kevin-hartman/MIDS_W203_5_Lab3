grid.arrange(p, p2, ncol=2)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
summary(dfCrime$density)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = density, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = density)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  west + central +
logpolpc + logpctmin80 + density, data = dfCrime)
coeftest(model3_initial, vcov=vcovHC)
linearHypothesis(model3_initial,c("west=0","central=0"), vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc
+ logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0"), vcov=vcovHC)
coeftest(model3, vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(model1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
stargazer(model1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
options(repr.plot.width=8, repr.plot.height=4)
#myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
#           "pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
#           "mix", "pctymle")]
myData<-dfCrime %>% filter(other==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(central==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(west==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r2 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r1, bottom = 'Central Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r2, bottom = 'Western Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r0, bottom = 'Other Region Correlation Plot'), ncol=1)
myData<-dfCrime %>% filter(urban==0)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(urban==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r0, bottom = 'Non-Urban Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r1, bottom = 'Urban Correlation Plot'), ncol=1)
plot(model1, which=5) # Variance Inflation Factor
#dfCrime$unweighted_avg_wage <- dfCrime$scaledWages/9
model1 <- lm(logcrmrte ~ logScaledWages + logcrimJustEff + west + central, data=dfCrime)
model1 # Coefficients
summary(model1)$adj.r.square # Adjusted R^2 value.
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  west + central +
logpolpc + logpctmin80 + density, data = dfCrime)
coeftest(model3_initial, vcov=vcovHC)
linearHypothesis(model3_initial,c("west=0","central=0"), vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc
+ logpctmin80 + density, data = dfCrime)
model3
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
plot(model3,which=2)
coeftest(model3, vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(model1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
stargazer(model1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
dfCrime = read.csv("crime_v2.csv")
summary(dfCrime)
dfCrime = read.csv("crime_v2.csv")
summary(dfCrime)
nrow(dfCrime)
dfCrime <-na.omit(dfCrime) # omit the NA rows
nrow(dfCrime)
dfCrime[duplicated(dfCrime),]
dfCrime <- dfCrime[!duplicated(dfCrime),] # remove the duplicated row
dfCrime$prbconv<-as.numeric(levels(dfCrime$prbconv))[dfCrime$prbconv]
dfCrime$pctmin80<-dfCrime$pctmin80/100
dfCrime$county<-as.factor(dfCrime$county)
dfCrime %>% group_by(west, central) %>% tally()
dfCrime %>%
filter(west ==1 & central ==1)
#Map central and west to a region code, and create a new category for other
# Note that county 71 has both western and central codes
dfCrime$region <- case_when (
(dfCrime$central ==0 & dfCrime$west ==0) ~ 0, #Eastern, Coastal, Other
(dfCrime$central ==0 & dfCrime$west ==1) ~ 1, #Western
(dfCrime$central ==1 & dfCrime$west ==0) ~ 2, #Central
(dfCrime$central ==1 & dfCrime$west ==1) ~ 3 #Central-Western county?
)
dfCrime$regcode =
factor( dfCrime$region , levels = 0:3 , labels =
c( 'Other',
'West',
'Central',
'CW')
)
dfCrime$other <- ifelse((dfCrime$central ==0 & dfCrime$west ==0), 1, 0)
dfCrime$nonurban <- ifelse((dfCrime$urban==0), 1, 0)
# create factor for SMSA (standard metropolitan statistical areas) with two levels
# (inside or outside)
#    https://www2.census.gov/prod2/decennial/documents/1980/1980censusofpopu8011uns_bw.pdf
dfCrime$metro =
factor( dfCrime$urban , levels = 0:1 , labels =
c( 'Outside Metro',
'Inside Metro'
)
)
#Plot of the economic and tax related variables vs crmrte
q1<-ggplot(data = dfCrime, aes(y = wcon, color = regcode)) +
geom_boxplot()
q2<-ggplot(data = dfCrime, aes(y = wtuc, color = regcode)) +
geom_boxplot()
q3<-ggplot(data = dfCrime, aes(y = wtrd, color = regcode)) +
geom_boxplot()
q4<-ggplot(data = dfCrime, aes(y = wfir, color = regcode)) +
geom_boxplot()
q5<-ggplot(data = dfCrime, aes(y = wser, color = regcode)) +
geom_boxplot()
q6<-ggplot(data = dfCrime, aes(y = wmfg, color = regcode)) +
geom_boxplot()
q7<-ggplot(data = dfCrime, aes(y = wfed, color = regcode)) +
geom_boxplot()
q8<-ggplot(data = dfCrime, aes(y = wsta, color = regcode)) +
geom_boxplot()
q9<-ggplot(data = dfCrime, aes(y = wloc, color = regcode)) +
geom_boxplot()
q10<-ggplot(data = dfCrime, aes(y = taxpc, color = regcode)) +
geom_boxplot()
grid.arrange(q1, q2, q3, q4, ncol=2)
grid.arrange(q5, q6, q7, q8, q9, q10, ncol=2)
dfCrime %>%
filter(wser > 2000) %>%
select(county, wser)
dfCrime$wser[which(dfCrime$county==185)]<-NA # set the value to NA so it will be imputed
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
#Review R-squares for Predicting Non-Missing Values for Each Variable.
#A high R-square reveals a high degree of confidence in being able to predict
impute_arg$rsq
# Review Distribution of Values from Each Imputation
table(impute_arg$imputed$wser)
dfCrime$wser[which(dfCrime$county==185)]<-mean(impute_arg$imputed$wser)
#Confirm assigned value
dfCrime$wser[which(dfCrime$county==185)]
#Plot of the criminal justice and law enforcment related variables vs crmrte
q1<-ggplot(data = dfCrime, aes(y = prbarr, color = regcode)) +
geom_boxplot()
q2<-ggplot(data = dfCrime, aes(y = prbconv, color = regcode)) +
geom_boxplot()
q3<-ggplot(data = dfCrime, aes(y = prbpris, color = regcode)) +
geom_boxplot()
q4<-ggplot(data = dfCrime, aes(y = avgsen, color = regcode)) +
geom_boxplot()
q5<-ggplot(data = dfCrime, aes(y = polpc, color = regcode)) +
geom_boxplot()
q6<-ggplot(data = dfCrime, aes(y = mix, color = regcode)) +
geom_boxplot()
grid.arrange(q1, q2, ncol=2)
grid.arrange(q3, q4, q5, q6, ncol=2)
dfCrime$polpc[which(dfCrime$county==115)]<-NA # set the value to NA so it will be imputed
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
mean(impute_arg$imputed$polpc)
dfCrime$polpc[which(dfCrime$county==115)]<-mean(impute_arg$imputed$polpc)
#plot of demographic information for counties Outside and Inside the metro areas
# population density, percent minority, percent young male
ggplot(data = dfCrime, aes(y = density, color = regcode)) +
geom_boxplot() + facet_wrap(~ metro)
ggplot(data = dfCrime, aes(y = pctmin80, color = regcode)) +
geom_boxplot() + facet_wrap(~ metro)
ggplot(data = dfCrime, aes(y = pctymle, color = regcode)) +
geom_boxplot() + facet_wrap(~ metro)
dfCrime %>%
#filter(west ==1 & central ==1) %>%
filter(density > 2.5) %>%
select(county, west, central, other, urban, region, regcode, metro)
dfCrime$west[which(dfCrime$county==71)]<-NA
dfCrime$central[which(dfCrime$county==71)]<-NA
dfCrime$other[which(dfCrime$county==71)]<-NA
dfCrime$urban[which(dfCrime$county==71)]<-NA
impute_arg <- aregImpute(~ crmrte +  urban + central + west +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
#We need a mode function, so lets define one. Source - public domain
Mode = function(x){
ta = table(x)
tam = max(ta)
if (all(ta == tam))
mod = NA
else
if(is.numeric(x))
mod = as.numeric(names(ta)[ta == tam])
else
mod = names(ta)[ta == tam]
return(mod)
}
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
Mode(impute_arg$imputed$urban)
Mode(impute_arg$imputed$central)
Mode(impute_arg$imputed$west)
dfCrime$urban[which(dfCrime$county==71)]<-Mode(impute_arg$imputed$urban)
dfCrime$nonurban[which(dfCrime$county==71)]<-1-Mode(impute_arg$imputed$urban)
dfCrime$west[which(dfCrime$county==71)]<-Mode(impute_arg$imputed$west)
dfCrime$metro[which(dfCrime$county==71)]<-'Inside Metro'
impute_arg <- aregImpute(~ crmrte + central + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
Mode(impute_arg$imputed$other)
dfCrime$other[which(dfCrime$county==71)]<-Mode(impute_arg$imputed$other)
dfCrime$central[which(dfCrime$county==71)]<-1-Mode(impute_arg$imputed$other)
dfCrime$region[which(dfCrime$county==71)]<- 2 #Central
dfCrime$regcode[which(dfCrime$county==71)]<- 'Central'
options(repr.plot.width=8, repr.plot.height=4)
ggplot(data = dfCrime, aes(x = density)) +
geom_histogram(bins=90)
dfCrime %>%
filter(density < 0.01)
dfCrime$density[which(dfCrime$county==173)]<- NA
impute_arg <- aregImpute(~ crmrte + urban + central + west +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, #%>% filter(urban==0 & west ==1),
match="weighted",  nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
mean(impute_arg$imputed$density)
dfCrime$density[which(dfCrime$county==173)]<-mean(impute_arg$imputed$density)
options(repr.plot.width=6, repr.plot.height=6)
myData<-dfCrime
myData<-myData[, c("crmrte", "west", "central", "other", "urban", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle", "density")]
plot<-myData %>% correlate() %>% network_plot(min_cor=.2)
grid.arrange(arrangeGrob(plot, bottom = 'Correlations Among Variables'),
top = "Network plot for Correlation Study", ncol=1)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = crmrte, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = crmrte)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
dfCrime$crimJustEff<-dfCrime$prbarr * dfCrime$prbconv
dfCrime$scaledWages<-(dfCrime$wcon + dfCrime$wtuc + dfCrime$wtrd + dfCrime$wfir +
dfCrime$wser + dfCrime$wmfg + dfCrime$wfed + dfCrime$wsta + dfCrime$wloc) / 9
p1 <- ggplot(dfCrime, aes(x = prbarr, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Probability of Arrest", x="Arrest per Crime", y="Count")
p2 <- ggplot(dfCrime, aes(x = prbconv, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Probability of Conviction", x="Conviction per Arrest", y="Count")
grid.arrange(p2, p1, ncol=2)
# County number of outlier
(dfCrime$county[dfCrime$crimJustEff > 1])
# how many standard deviations away the outlier lies
(dfCrime[dfCrime$crimJustEff > 1,]$prbarr - mean(dfCrime$prbarr))/sd(dfCrime$prbarr)
dfCrime$prbarr[which(dfCrime$county==115)]<-NA # set the value to NA so it will be imputed
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
mean(impute_arg$imputed$prbarr)
dfCrime$prbarr[which(dfCrime$county==115)]<-mean(impute_arg$imputed$prbarr)
dfCrime$crimJustEff<-dfCrime$prbarr * dfCrime$prbconv
dfCrime$logcrimJustEff<-log(dfCrime$crimJustEff)
dfCrime$logcrmrte <- log(dfCrime$crmrte)
options(repr.plot.width=4, repr.plot.height=4)
p1 <- ggplot(dfCrime, aes(x = crimJustEff, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Criminal Justice Effectiveness", x="Convictions per Crime", y="Count")
p2 <- ggplot(dfCrime, aes(x = logcrimJustEff, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="log(Criminal Justice Effectiveness)", x="log(Convictions per Crime)", y="Count")
grid.arrange(p1, p2, ncol=2)
# # Quantiles for all jobs
dfWage<-mutate(dfCrime,qCon=ntile(dfCrime$wcon,4))
dfWage<-mutate(dfWage,qTuc=ntile(dfCrime$wtuc,4))
dfWage<-mutate(dfWage,qTrd=ntile(dfCrime$wtrd,4))
dfWage<-mutate(dfWage,qFir=ntile(dfCrime$wfir,4))
dfWage<-mutate(dfWage,qSer=ntile(dfCrime$wser,4))
dfWage<-mutate(dfWage,qMfg=ntile(dfCrime$wmfg,4))
dfWage<-mutate(dfWage,qFed=ntile(dfCrime$wfed,4))
dfWage<-mutate(dfWage,qSta=ntile(dfCrime$wsta,4))
dfWage<-mutate(dfWage,qLoc=ntile(dfCrime$wloc,4))
## Average quantile
dfWage$qAvg= (dfWage$qCon+dfWage$qTuc+dfWage$qTrd+dfWage$qFir+dfWage$qSer+dfWage$qMfg+
dfWage$qFed+dfWage$qSta+dfWage$qLoc)/9
plot(dfCrime$scaledWages,dfWage$qAvg)
dfCrime$logScaledWages <- log(dfCrime$scaledWages)
p1 <- ggplot(dfCrime, aes(x = logScaledWages, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="log(Scaled Wages)", x="log(Scaled Wages)", y="Count")
p1
q9<-ggplot(data = dfCrime, aes(x = logScaledWages, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
q9
dfCrime$logcrmrte <- log(dfCrime$crmrte)
options(repr.plot.width=4, repr.plot.height=4)
p1 <- ggplot(dfCrime, aes(x = crmrte, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Crime Rate", x="Crimes per Capita", y="Count")
p2 <- ggplot(dfCrime, aes(x = logcrmrte, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="log(Crime Rate)", x="log(Crimes per capita)", y="Count")
grid.arrange(p1, p2, ncol=2)
#dfCrime$unweighted_avg_wage <- dfCrime$scaledWages/9
model1 <- lm(logcrmrte ~ logScaledWages + logcrimJustEff + west + central, data=dfCrime)
model1 # Coefficients
summary(model1)$adj.r.square # Adjusted R^2 value.
plot(model1, which=5) # Variance Inflation Factor
vif(model1) # Variance Inflation Factor
plot(model1, which=1)
bptest(model1)
coeftest(model1, vcov=vcovHC) #coefficients with heteroskedastic consistent standard errors
shapiro.test(model1$residuals) # test for normality
plot(model1, which=2) # QQ plot for residuals
p1 <- ggplot(dfCrime, aes(x = polpc, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Police per Capita", x="Police per Capita", y="Count")
p2 <- ggplot(dfCrime, aes(x = log(polpc), color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Log Transformed Police per Capita", x="Log(Police per Capita)", y="Count")
grid.arrange(p1, p2, ncol=2)
# creating the logpolpc variable
dfCrime$logpolpc <- log(dfCrime$polpc)
p1 <- ggplot(dfCrime, aes(x = taxpc, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Tax revenue per capita", x="Tax revenue per Capita", y="Count")
p2 <- ggplot(dfCrime, aes(x = log(taxpc), color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Log Transformed Tax revenue per Capita", x="Log(Tax revenue per Capita)", y="Count")
grid.arrange(p1, p2, ncol=2)
dfCrime$logtaxpc <- log(dfCrime$taxpc)
logpolpc_plot<-ggplot(data = dfCrime, aes(x = logpolpc, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
logtaxpc_plot<-ggplot(data = dfCrime, aes(x = logtaxpc, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
grid.arrange(logpolpc_plot,logtaxpc_plot, ncol=2)
model2 <- lm(logcrmrte ~ logScaledWages + logcrimJustEff + logpolpc*west + logpolpc*central + logtaxpc, data = dfCrime)
model2
summary(model2)$adj.r.square
plot(model2, which=5)
vif(model2)
plot(model2, which=1)
bptest(model2)
coeftest(model2, vcov=vcovHC)
linearHypothesis(model2, c("logpolpc:west=0", "logpolpc:central=0"), vcov=vcovHC)
linearHypothesis(model2, c("logpolpc=0", "logtaxpc=0"), vcov=vcovHC)
plot(model2, which=2)
summary(dfCrime$pctmin80)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = pctmin80, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = pctmin80)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
summary(dfCrime$density)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = density, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = density)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  west + central +
logpolpc + logpctmin80 + density, data = dfCrime)
coeftest(model3_initial, vcov=vcovHC)
linearHypothesis(model3_initial,c("west=0","central=0"), vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc
+ logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0"), vcov=vcovHC)
coeftest(model3, vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(model1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
stargazer(model1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
options(repr.plot.width=8, repr.plot.height=4)
#myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
#           "pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
#           "mix", "pctymle")]
myData<-dfCrime %>% filter(other==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(central==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(west==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r2 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r1, bottom = 'Central Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r2, bottom = 'Western Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r0, bottom = 'Other Region Correlation Plot'), ncol=1)
myData<-dfCrime %>% filter(urban==0)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(urban==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r0, bottom = 'Non-Urban Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r1, bottom = 'Urban Correlation Plot'), ncol=1)
