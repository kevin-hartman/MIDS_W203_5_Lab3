p<-ggplot(data = dfCrime, aes(y = pctmin80, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = pctmin80)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
summary(dfCrime$density)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = density, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = density)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff   +  regcode + logpolpc + logtaxpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
vif(model3_initial)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc +
logtaxpc + logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0","logtaxpc=0"), vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(mod1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
#model23<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*regcode + logtaxpc +density + logpctmin80, data = dfCrime)
#se.model23 <- ctdf(coeftest(model23, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
#stargazer(mod1, model2, model23, model3, type = "text", omit.stat = "f",
#          se = list(se.model1, se.model2, se.model23, se.model3),
#          star.cutoffs = c(0.05, 0.01, 0.001))
stargazer(mod1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
# waldtest(mod1, model2, vcov=vcovHC)
# waldtest(model2, model23, vcov=vcovHC)
# waldtest(model23, model3, vcov=vcovHC)
#
# model4<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*west  +density + logpctmin80, data = dfCrime)
# coeftest(model4, vcov=vcovHC)
# summary(model4)$adj.r.square
# linearHypothesis(model4,c("logpolpc:west=0", "west=0"), vcov=vcovHC)
options(repr.plot.width=8, repr.plot.height=4)
#myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
#           "pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
#           "mix", "pctymle")]
myData<-dfCrime %>% filter(other==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(central==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(west==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r2 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r1, bottom = 'Central Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r2, bottom = 'Western Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r0, bottom = 'Other Region Correlation Plot'), ncol=1)
myData<-dfCrime %>% filter(urban==0)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(urban==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r0, bottom = 'Non-Urban Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r1, bottom = 'Urban Correlation Plot'), ncol=1)
#dfEconVars <- as.data.frame(cbind(dfCrime$wcon, dfCrime$wtuc, dfCrime$wtrd, dfCrime$wfir,
#                                  dfCrime$wser, dfCrime$wmfg, dfCrime$wfed, dfCrime$wsta,
#                                  dfCrime$wloc))
#names(dfEconVars) <- c('wcon', 'wtuc', 'wtrd', 'wfir', 'wser',
#                              'wmfg', 'wfed', 'wsta', 'wloc')
#
#ggplot(melt(dfEconVars),aes(x=value)) + geom_histogram(bins=30) + facet_wrap(~variable)
#The economic variables
q1<-ggplot(data = dfCrime, aes(x = wcon, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(wcon), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = wtuc, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(wtuc), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = wtrd, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(wtrd), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q4<-ggplot(data = dfCrime, aes(x = wfir, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q4a<-ggplot(data = dfCrime, aes(x = log(wfir), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q5<-ggplot(data = dfCrime, aes(x = wser, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q5a<-ggplot(data = dfCrime, aes(x = log(wser), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q6<-ggplot(data = dfCrime, aes(x = wmfg, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q6a<-ggplot(data = dfCrime, aes(x = log(wmfg), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q7<-ggplot(data = dfCrime, aes(x = wfed, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q7a<-ggplot(data = dfCrime, aes(x = log(wfed), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q8<-ggplot(data = dfCrime, aes(x = wsta, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q8a<-ggplot(data = dfCrime, aes(x = log(wsta), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q9<-ggplot(data = dfCrime, aes(x = wloc, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q9a<-ggplot(data = dfCrime, aes(x = log(wloc), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
grid.arrange(q4, q4a, q5, q5a, q6, q6a, ncol=2)
grid.arrange(q7, q7a, q8, q8a, q9, q9a, ncol=2)
dfCrime$logwcon<-log(dfCrime$wcon)
dfCrime$logwtuc<-log(dfCrime$wtuc)
dfCrime$logwtrd<-log(dfCrime$wtrd)
dfCrime$logwfir<-log(dfCrime$wfir)
dfCrime$logwser<-log(dfCrime$wser)
dfCrime$logwmfg<-log(dfCrime$wmfg)
dfCrime$logwfed<-log(dfCrime$wfed)
dfCrime$logwsta<-log(dfCrime$wsta)
dfCrime$logwloc<-log(dfCrime$wloc)
#Plot of the criminal justice and law enforcment related variables vs crmrte
q1<-ggplot(data = dfCrime, aes(x = prbarr, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(prbarr), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = prbconv, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(prbconv), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = prbpris, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(prbpris), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q4<-ggplot(data = dfCrime, aes(x = avgsen, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q4a<-ggplot(data = dfCrime, aes(x = log(avgsen), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q5<-ggplot(data = dfCrime, aes(x = polpc, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q5a<-ggplot(data = dfCrime, aes(x = log(polpc), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q6<-ggplot(data = dfCrime, aes(x = mix, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q6a<-ggplot(data = dfCrime, aes(x = log(mix), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
grid.arrange(q4, q4a, q5, q5a, q6, q6a, ncol=2)
dfCrime$logprbarr <- log(dfCrime$prbarr)
dfCrime$logprbconv <- log(dfCrime$prbconv)
dfCrime$logprbpris <- log(dfCrime$prbpris)
dfCrime$logavgsen <- log(dfCrime$avgsen)
dfCrime$logpolpc <- log(dfCrime$polpc)
dfCrime$logmix <- log(dfCrime$mix)
q1<-ggplot(data = dfCrime, aes(x = pctymle, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(pctymle), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = pctmin80, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(pctmin80), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = density, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(density), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
dfCrime$logdensity <- log(dfCrime$density)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
dfCrime$logpctymle <- log(dfCrime$pctymle)
q1<-ggplot(data = dfCrime, aes(x = taxpc, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(taxpc), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = crmrte)) +
geom_histogram(bins=30)
q2a<-ggplot(data = dfCrime, aes(x = log(crmrte))) +
geom_histogram(bins=30)
grid.arrange(q1, q1a, q2, q2a, ncol=2)
dfCrime$logcrmrte = log(dfCrime$crmrte)
dfCrime$logtaxpc = log(dfCrime$taxpc)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff   +  regcode + logpolpc + logtaxpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
vif(model3_initial)
library(stargazer)
library(cowplot)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(plyr)
library(expss)
library(car)
library(corrplot)
library(gridExtra)
library(corrr)
library(Hmisc)
library(broom)
library(lmtest)
library(sandwich)
library(PerformanceAnalytics)
library(psych)
library(GGally)
library(ggcorrplot)
library(tmap)
install.packages("tmap")
install.packages(c("classInt", "sf"))
library(stargazer)
library(cowplot)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(plyr)
library(expss)
library(car)
library(corrplot)
library(gridExtra)
library(corrr)
library(Hmisc)
library(broom)
library(lmtest)
library(sandwich)
library(PerformanceAnalytics)
library(psych)
library(GGally)
library(ggcorrplot)
Ylibrary(tmap)
library(stargazer)
library(cowplot)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(plyr)
library(expss)
library(car)
library(corrplot)
library(gridExtra)
library(corrr)
library(Hmisc)
library(broom)
library(lmtest)
library(sandwich)
library(PerformanceAnalytics)
library(psych)
library(GGally)
library(ggcorrplot)
#library(tmap)
#library(sf)
suppressMessages(library(stargazer))
suppressMessages(library(cowplot))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(kableExtra))
suppressMessages(library(plyr))
suppressMessages(library(expss))
suppressMessages(library(car))
suppressMessages(library(corrplot))
suppressMessages(library(gridExtra))
suppressMessages(library(corrr))
suppressMessages(library(Hmisc))
suppressMessages(library(broom))
suppressMessages(library(lmtest))
suppressMessages(library(sandwich))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(library(psych))
suppressMessages(library(GGally))
suppressMessages(library(ggcorrplot))
suppressMessages(library(knitr))
#suppressMessages(library(tmap))
#suppressMessages(library(sf))
knitr::opts_chunk$set(echo = TRUE)
dfCrime = read.csv("crime_v2.csv")
summary(dfCrime)
nrow(dfCrime)
dfCrime <-na.omit(dfCrime) # omit the NA rows
nrow(dfCrime)
dfCrime[duplicated(dfCrime),]
dfCrime <- dfCrime[!duplicated(dfCrime),] # remove the duplicated row
dfCrime$prbconv<-as.numeric(levels(dfCrime$prbconv))[dfCrime$prbconv]
dfCrime$prbconv<-as.numeric(levels(dfCrime$prbconv))[dfCrime$prbconv]
dfCrime$pctmin80<-dfCrime$pctmin80/100
dfCrime$county<-as.factor(dfCrime$county)
dfCrime %>% group_by(west, central) %>% tally()
dfCrime %>%
filter(west ==1 & central ==1)
#Map central and west to a region code, and create a new category for other
# Note that county 71 has both western and central codes
dfCrime$region <- case_when (
(dfCrime$central ==0 & dfCrime$west ==0) ~ 0, #Eastern, Coastal, Other
(dfCrime$central ==0 & dfCrime$west ==1) ~ 1, #Western
(dfCrime$central ==1 & dfCrime$west ==0) ~ 2, #Central
(dfCrime$central ==1 & dfCrime$west ==1) ~ 3 #Central-Western county?
)
dfCrime$regcode =
factor( dfCrime$region , levels = 0:3 , labels =
c( 'Other',
'West',
'Central',
'CW')
)
dfCrime$other <- ifelse((dfCrime$central ==0 & dfCrime$west ==0), 1, 0)
dfCrime$nonurban <- ifelse((dfCrime$urban==0), 1, 0)
# create factor for SMSA (standard metropolitan statistical areas) with two levels
# (inside or outside)
#    https://www2.census.gov/prod2/decennial/documents/1980/1980censusofpopu8011uns_bw.pdf
dfCrime$metro =
factor( dfCrime$urban , levels = 0:1 , labels =
c( 'Outside Metro',
'Inside Metro'
)
)
#Plot of the economic and tax related variables vs crmrte
q1<-ggplot(data = dfCrime, aes(y = wcon, color = regcode)) +
geom_boxplot()
q2<-ggplot(data = dfCrime, aes(y = wtuc, color = regcode)) +
geom_boxplot()
q3<-ggplot(data = dfCrime, aes(y = wtrd, color = regcode)) +
geom_boxplot()
q4<-ggplot(data = dfCrime, aes(y = wfir, color = regcode)) +
geom_boxplot()
q5<-ggplot(data = dfCrime, aes(y = wser, color = regcode)) +
geom_boxplot()
q6<-ggplot(data = dfCrime, aes(y = wmfg, color = regcode)) +
geom_boxplot()
q7<-ggplot(data = dfCrime, aes(y = wfed, color = regcode)) +
geom_boxplot()
q8<-ggplot(data = dfCrime, aes(y = wsta, color = regcode)) +
geom_boxplot()
q9<-ggplot(data = dfCrime, aes(y = wloc, color = regcode)) +
geom_boxplot()
q10<-ggplot(data = dfCrime, aes(y = taxpc, color = regcode)) +
geom_boxplot()
grid.arrange(q1, q2, ncol=2)
grid.arrange(q3, q4, ncol=2)
grid.arrange(q5, q6, ncol=2)
grid.arrange(q7, q8, ncol=2)
grid.arrange(q9, q10, ncol=2)
dfCrime %>%
filter(wser > 2000) %>%
select(county, wser)
dfCrime$wser[which(dfCrime$county==185)]<-NA # set the value to NA so it will be imputed
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
library(stargazer)
library(cowplot)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
options(kableExtra.latex.load_packages = TRUE)
library(kableExtra)
library(plyr)
library(expss)
library(car)
library(corrplot)
library(gridExtra)
library(corrr)
library(Hmisc)
library(broom)
library(lmtest)
library(sandwich)
library(PerformanceAnalytics)
library(psych)
library(GGally)
library(ggcorrplot)
#library(tmap)
#library(sf)
suppressMessages(library(stargazer))
suppressMessages(library(cowplot))
suppressMessages(library(ggplot2))
suppressMessages(library(tidyr))
suppressMessages(library(dplyr))
suppressMessages(library(reshape2))
suppressMessages(library(kableExtra))
suppressMessages(library(plyr))
suppressMessages(library(expss))
suppressMessages(library(car))
suppressMessages(library(corrplot))
suppressMessages(library(gridExtra))
suppressMessages(library(corrr))
suppressMessages(library(Hmisc))
suppressMessages(library(broom))
suppressMessages(library(lmtest))
suppressMessages(library(sandwich))
suppressMessages(library(PerformanceAnalytics))
suppressMessages(library(psych))
suppressMessages(library(GGally))
suppressMessages(library(ggcorrplot))
suppressMessages(library(knitr))
#suppressMessages(library(tmap))
#suppressMessages(library(sf))
knitr::opts_chunk$set(echo = TRUE)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
