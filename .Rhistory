dfCrime$metro[which(dfCrime$county==71)]<-'Inside Metro'
impute_arg <- aregImpute(~ crmrte + central + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
Mode(impute_arg$imputed$other)
dfCrime$other[which(dfCrime$county==71)]<-Mode(impute_arg$imputed$other)
dfCrime$central[which(dfCrime$county==71)]<-1-Mode(impute_arg$imputed$other)
dfCrime$region[which(dfCrime$county==71)]<- 2 #Central
dfCrime$regcode[which(dfCrime$county==71)]<- 'Central'
options(repr.plot.width=8, repr.plot.height=4)
ggplot(data = dfCrime, aes(x = density)) +
geom_histogram(bins=90)
dfCrime %>%
filter(density < 0.01)
dfCrime$density[which(dfCrime$county==173)]<- NA
#dfSubset <-  we will use the non-urban western counties
impute_arg <- aregImpute(~ crmrte +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime %>% filter(urban==0 & west ==1),
match="weighted",  nk=3, B=10, n.impute = 30)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
mean(impute_arg$imputed$density)
dfCrime$density[which(dfCrime$county==173)]<-mean(impute_arg$imputed$density)
options(repr.plot.width=6, repr.plot.height=6)
myData<-dfCrime
myData<-myData[, c("crmrte", "west", "central", "other", "urban", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle", "density")]
plot<-myData %>% correlate() %>% network_plot(min_cor=.2)
grid.arrange(arrangeGrob(plot, bottom = 'Correlations Among Variables'),
top = "Network plot for Correlation Study", ncol=1)
dfCrime$scaledWages<-(dfCrime$wcon + dfCrime$wtuc + dfCrime$wtrd + dfCrime$wfir +
dfCrime$wser + dfCrime$wmfg + dfCrime$wfed + dfCrime$wsta + dfCrime$wloc) / 9
dfCrime$crimJustEff<-dfCrime$prbarr * dfCrime$prbconv
dfCrime$logcrimJustEff<-log(dfCrime$crimJustEff)
p<-ggplot(data = dfCrime, aes(y = crmrte, color = regcode)) +
geom_boxplot() + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = crmrte)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
options(repr.plot.width=3, repr.plot.height=4)
ggplot(data = dfCrime, aes(y = crmrte)) +
geom_boxplot()
p1 <- ggplot(dfCrime, aes(x = prbarr, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Probability of Arrest", x="Arrest per Crime", y="Count")
p2 <- ggplot(dfCrime, aes(x = prbconv, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Probability of Conviction", x="Conviction per Arrest", y="Count")
grid.arrange(p2, p1, ncol=2)
# how many standard deviations away the outlier lies
(dfCrime[51,]$prbarr - mean(dfCrime$prbarr))/sd(dfCrime$prbarr) # standard deviations away from the mean.
dfCrime[dfCrime$crimJustEff > 1,] # find outlier
dfCrime$prbarr[which(dfCrime$county==115)]<-NA # set the value to NA so it will be imputed
impute_arg <- aregImpute(~ crmrte +  urban + central + west + other +
prbarr + prbconv + prbpris + avgsen + polpc +
density + taxpc + pctmin80 + wcon + wtuc +
wtrd + wfir + wser + wmfg + wfed + wsta + wloc +
mix + pctymle, data = dfCrime, match="weighted",
nk=3, B=10, n.impute = 100)
paste("R-squares for Predicting Non-Missing Values for Each Variable")
impute_arg$rsq
paste("Predicted values")
mean(impute_arg$imputed$prbarr)
dfCrime$prbarr[which(dfCrime$county==115)]<-mean(impute_arg$imputed$prbarr)
dfCrime$crimJustEff<-dfCrime$prbarr * dfCrime$prbconv
dfCrime$logcrimJustEff<-log(dfCrime$crimJustEff)
dfCrime$logcrmrte <- log(dfCrime$crmrte)
options(repr.plot.width=4, repr.plot.height=4)
p1 <- ggplot(dfCrime, aes(x = crimJustEff, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Criminal Justice Effectiveness", x="Convictions per Crime", y="Count")
p2 <- ggplot(dfCrime, aes(x = logcrimJustEff, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="log(Criminal Justice Effectiveness)", x="log(Convictions per Crime)", y="Count")
grid.arrange(p1, p2, ncol=2)
# # Quantiles for all jobs
dfWage<-mutate(dfCrime,qCon=ntile(dfCrime$wcon,4))
dfWage<-mutate(dfWage,qTuc=ntile(dfCrime$wtuc,4))
dfWage<-mutate(dfWage,qTrd=ntile(dfCrime$wtrd,4))
dfWage<-mutate(dfWage,qFir=ntile(dfCrime$wfir,4))
dfWage<-mutate(dfWage,qSer=ntile(dfCrime$wser,4))
dfWage<-mutate(dfWage,qMfg=ntile(dfCrime$wmfg,4))
dfWage<-mutate(dfWage,qFed=ntile(dfCrime$wfed,4))
dfWage<-mutate(dfWage,qSta=ntile(dfCrime$wsta,4))
dfWage<-mutate(dfWage,qLoc=ntile(dfCrime$wloc,4))
## Average quantile
dfWage$qAvg= (dfWage$qCon+dfWage$qTuc+dfWage$qTrd+dfWage$qFir+dfWage$qSer+dfWage$qMfg+
dfWage$qFed+dfWage$qSta+dfWage$qLoc)/9
#plot(dfCrime$scaledWages,dfWage$qAvg)
#ggplot( aes(x = dfCrime$scaledWages, y = dfWage$qAvg)) +
#      geom_point()+
#  geom_smooth(method = "lm")
dfCrime$logScaledWages <- log(dfCrime$scaledWages)
p1 <- ggplot(dfCrime, aes(x = logScaledWages, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="log(Scaled Wages)", x="log(Scaled Wages)", y="Count")
p1
q9<-ggplot(data = dfCrime, aes(x = logScaledWages, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
q9
#dfCrime$unweighted_avg_wage <- dfCrime$scaledWages/9
mod1 <- lm(logcrmrte ~ logScaledWages + logcrimJustEff + regcode, data=dfCrime)
mod1 # Coefficients
summary(mod1)$adj.r.square # Adjusted R^2 value.
plot(mod1, which=5) # Variance Inflation Factor
vif(mod1) # Variance Inflation Factor
plot(mod1, which=1)
bptest(mod1)
coeftest(mod1, vcov=vcovHC) #coefficients with heteroskedastic consistent standard errors
shapiro.test(mod1$residuals) # test for normality
plot(mod1, which=2) # QQ plot for residuals
p1 <- ggplot(dfCrime, aes(x = polpc, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Police per Capita", x="Police per Capita", y="Count")
p2 <- ggplot(dfCrime, aes(x = log(polpc), color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Log Transformed Police per Capita", x="Log(Police per Capita)", y="Count")
grid.arrange(p1, p2, ncol=2)
# creating the logpolpc variable
dfCrime$logpolpc <- log(dfCrime$polpc)
p1 <- ggplot(dfCrime, aes(x = taxpc, color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Tax revenue per capita", x="Tax revenue per Capita", y="Count")
p2 <- ggplot(dfCrime, aes(x = log(taxpc), color=regcode, fill = regcode)) +
geom_histogram(position="identity", alpha=0.5, bins=30) +
labs(title="Log Transformed Tax revenue per Capita", x="Log(Tax revenue per Capita)", y="Count")
grid.arrange(p1, p2, ncol=2)
dfCrime$logtaxpc <- log(dfCrime$taxpc)
logpolpc_plot<-ggplot(data = dfCrime, aes(x = logpolpc, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
logtaxpc_plot<-ggplot(data = dfCrime, aes(x = logtaxpc, y = logcrmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
grid.arrange(logpolpc_plot,logtaxpc_plot, ncol=2)
model2 <- lm(logcrmrte ~ logScaledWages + logcrimJustEff + logpolpc*regcode + logtaxpc, data = dfCrime)
model2
summary(model2)$adj.r.square
plot(model2, which=5)
vif(model2)
plot(model2, which=1)
coeftest(model2, vcov=vcovHC)
linearHypothesis(model2, c("logpolpc:regcodeWest=0", "logpolpc:regcodeCentral"), vcov=vcovHC)
plot(model2, which=2)
# hist(model2$residuals)
#shapiro.test(model2$residuals)
#null hypothesis: residuals drawn from population with a normal distribution.
#small p-value tells you if you can reject the null hypothesis.
#this test depends on sample size, it does not take very much deviation from normality for
#us to get a statistically significant result
summary(model2)
summary(dfCrime$pctmin80)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = pctmin80, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = pctmin80)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
summary(dfCrime$density)
options(repr.plot.width=8, repr.plot.height=4)
p<-ggplot(data = dfCrime, aes(y = density, color = regcode)) +
geom_boxplot(show.legend=FALSE) + facet_wrap(~ regcode)
p2<-ggplot(data = dfCrime, aes(y = density)) +
geom_boxplot()
grid.arrange(p, p2, ncol=2)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff   +  regcode + logpolpc + logtaxpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
vif(model3_initial)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc +
logtaxpc + logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0","logtaxpc=0"), vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(mod1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
#model23<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*regcode + logtaxpc +density + logpctmin80, data = dfCrime)
#se.model23 <- ctdf(coeftest(model23, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
#stargazer(mod1, model2, model23, model3, type = "text", omit.stat = "f",
#          se = list(se.model1, se.model2, se.model23, se.model3),
#          star.cutoffs = c(0.05, 0.01, 0.001))
stargazer(mod1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
# waldtest(mod1, model2, vcov=vcovHC)
# waldtest(model2, model23, vcov=vcovHC)
# waldtest(model23, model3, vcov=vcovHC)
#
# model4<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*west  +density + logpctmin80, data = dfCrime)
# coeftest(model4, vcov=vcovHC)
# summary(model4)$adj.r.square
# linearHypothesis(model4,c("logpolpc:west=0", "west=0"), vcov=vcovHC)
options(repr.plot.width=8, repr.plot.height=4)
#myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
#           "pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
#           "mix", "pctymle")]
myData<-dfCrime %>% filter(other==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(central==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(west==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r2 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r1, bottom = 'Central Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r2, bottom = 'Western Region Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r0, bottom = 'Other Region Correlation Plot'), ncol=1)
myData<-dfCrime %>% filter(urban==0)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r0 <- myData %>% correlate() %>% network_plot(min_cor=.25)
myData<-dfCrime %>% filter(urban==1)
myData<-myData[, c("crmrte", "prbarr", "prbconv", "prbpris", "avgsen", "polpc", "density", "taxpc",
"pctmin80", "wcon", "wtuc", "wtrd", "wfir", "wser", "wmfg", "wfed", "wsta", "wloc",
"mix", "pctymle")]
r1 <- myData %>% correlate() %>% network_plot(min_cor=.25)
grid.arrange(arrangeGrob(r0, bottom = 'Non-Urban Correlation Plot'), ncol=1)
grid.arrange(arrangeGrob(r1, bottom = 'Urban Correlation Plot'), ncol=1)
#dfEconVars <- as.data.frame(cbind(dfCrime$wcon, dfCrime$wtuc, dfCrime$wtrd, dfCrime$wfir,
#                                  dfCrime$wser, dfCrime$wmfg, dfCrime$wfed, dfCrime$wsta,
#                                  dfCrime$wloc))
#names(dfEconVars) <- c('wcon', 'wtuc', 'wtrd', 'wfir', 'wser',
#                              'wmfg', 'wfed', 'wsta', 'wloc')
#
#ggplot(melt(dfEconVars),aes(x=value)) + geom_histogram(bins=30) + facet_wrap(~variable)
#The economic variables
q1<-ggplot(data = dfCrime, aes(x = wcon, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(wcon), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = wtuc, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(wtuc), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = wtrd, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(wtrd), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q4<-ggplot(data = dfCrime, aes(x = wfir, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q4a<-ggplot(data = dfCrime, aes(x = log(wfir), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q5<-ggplot(data = dfCrime, aes(x = wser, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q5a<-ggplot(data = dfCrime, aes(x = log(wser), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q6<-ggplot(data = dfCrime, aes(x = wmfg, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q6a<-ggplot(data = dfCrime, aes(x = log(wmfg), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q7<-ggplot(data = dfCrime, aes(x = wfed, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q7a<-ggplot(data = dfCrime, aes(x = log(wfed), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q8<-ggplot(data = dfCrime, aes(x = wsta, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q8a<-ggplot(data = dfCrime, aes(x = log(wsta), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q9<-ggplot(data = dfCrime, aes(x = wloc, y = crmrte, color = metro)) +
geom_point()+
geom_smooth(method = "lm")
q9a<-ggplot(data = dfCrime, aes(x = log(wloc), y = log(crmrte), color = metro)) +
geom_point()+
geom_smooth(method = "lm")
options(repr.plot.width=8, repr.plot.height=16)
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
grid.arrange(q4, q4a, q5, q5a, q6, q6a, ncol=2)
grid.arrange(q7, q7a, q8, q8a, q9, q9a, ncol=2)
dfCrime$logwcon<-log(dfCrime$wcon)
dfCrime$logwtuc<-log(dfCrime$wtuc)
dfCrime$logwtrd<-log(dfCrime$wtrd)
dfCrime$logwfir<-log(dfCrime$wfir)
dfCrime$logwser<-log(dfCrime$wser)
dfCrime$logwmfg<-log(dfCrime$wmfg)
dfCrime$logwfed<-log(dfCrime$wfed)
dfCrime$logwsta<-log(dfCrime$wsta)
dfCrime$logwloc<-log(dfCrime$wloc)
#Plot of the criminal justice and law enforcment related variables vs crmrte
q1<-ggplot(data = dfCrime, aes(x = prbarr, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(prbarr), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = prbconv, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(prbconv), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = prbpris, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(prbpris), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q4<-ggplot(data = dfCrime, aes(x = avgsen, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q4a<-ggplot(data = dfCrime, aes(x = log(avgsen), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q5<-ggplot(data = dfCrime, aes(x = polpc, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q5a<-ggplot(data = dfCrime, aes(x = log(polpc), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q6<-ggplot(data = dfCrime, aes(x = mix, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q6a<-ggplot(data = dfCrime, aes(x = log(mix), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
grid.arrange(q4, q4a, q5, q5a, q6, q6a, ncol=2)
dfCrime$logprbarr <- log(dfCrime$prbarr)
dfCrime$logprbconv <- log(dfCrime$prbconv)
dfCrime$logprbpris <- log(dfCrime$prbpris)
dfCrime$logavgsen <- log(dfCrime$avgsen)
dfCrime$logpolpc <- log(dfCrime$polpc)
dfCrime$logmix <- log(dfCrime$mix)
q1<-ggplot(data = dfCrime, aes(x = pctymle, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(pctymle), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = pctmin80, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2a<-ggplot(data = dfCrime, aes(x = log(pctmin80), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3<-ggplot(data = dfCrime, aes(x = density, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q3a<-ggplot(data = dfCrime, aes(x = log(density), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
grid.arrange(q1, q1a, q2, q2a, q3, q3a, ncol=2)
dfCrime$logdensity <- log(dfCrime$density)
dfCrime$logpctmin80 <- log(dfCrime$pctmin80)
dfCrime$logpctymle <- log(dfCrime$pctymle)
q1<-ggplot(data = dfCrime, aes(x = taxpc, y = crmrte, color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q1a<-ggplot(data = dfCrime, aes(x = log(taxpc), y = log(crmrte), color = regcode)) +
geom_point()+
geom_smooth(method = "lm")
q2<-ggplot(data = dfCrime, aes(x = crmrte)) +
geom_histogram(bins=30)
q2a<-ggplot(data = dfCrime, aes(x = log(crmrte))) +
geom_histogram(bins=30)
grid.arrange(q1, q1a, q2, q2a, ncol=2)
dfCrime$logcrmrte = log(dfCrime$crmrte)
dfCrime$logtaxpc = log(dfCrime$taxpc)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  regcode + logpolpc + logtaxpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
vif(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc +
logtaxpc + logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
coeftest(model3, vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(mod1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
#model23<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*regcode + logtaxpc +density + logpctmin80, data = dfCrime)
#se.model23 <- ctdf(coeftest(model23, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
#stargazer(mod1, model2, model23, model3, type = "text", omit.stat = "f",
#          se = list(se.model1, se.model2, se.model23, se.model3),
#          star.cutoffs = c(0.05, 0.01, 0.001))
stargazer(mod1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
# waldtest(mod1, model2, vcov=vcovHC)
# waldtest(model2, model23, vcov=vcovHC)
# waldtest(model23, model3, vcov=vcovHC)
#
# model4<-lm(logcrmrte ~ logcrimJustEff + logpolpc + logScaledWages + logpolpc*west  +density + logpctmin80, data = dfCrime)
# coeftest(model4, vcov=vcovHC)
# summary(model4)$adj.r.square
# linearHypothesis(model4,c("logpolpc:west=0", "west=0"), vcov=vcovHC)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  regcode +
logpolpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  regcode +
logpolpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)$Pr(>|t|)
model3_initial<-lm(logcrmrte ~ logScaledWages + logcrimJustEff  +  regcode +
logpolpc + logpctmin80 + density, data = dfCrime)
summary(model3_initial)
linearHypothesis(model3_initial,c("regcodeWest=0","regcodeCentral=0"), vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc +
+ logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc +
+ logpctmin80 + density, data = dfCrime)
model3
summary(model3)$adj.r.square
plot(model3,which=5)
vif(model3)
plot(model3, which = 1)
plot(model3, which = 1)
coeftest(model3, vcov=vcovHC)
plot(model3,which=2)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0","logtaxpc=0"), vcov=vcovHC)
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0"), vcov=vcovHC)
coeftest(model3, vcov=vcovHC)
model3<-lm(logcrmrte ~ logcrimJustEff + logScaledWages +  logpolpc
+ logpctmin80 + density, data = dfCrime)
model3
linearHypothesis(model3,c("logpolpc=0","logScaledWages=0"), vcov=vcovHC)
#*** Function to convert coeftest results object into data frame
ctdf=function(x){
rt=list()                             # generate empty results list
for(c in 1:dim(x)[2]) rt[[c]]=x[,c]   # writes column values of x to list
rt=as.data.frame(rt)                  # converts list to data frame object
names(rt)=names(x[1,])                # assign correct column names
rt[,"sig"]=symnum(rt$`Pr(>|z|)`, corr = FALSE, na = FALSE,
cutpoints = c(0, 0.001, 0.01, 0.05, 0.1, 1),
symbols = c("***", "**", "*", ".", " "))
return(rt)
}
# Get vectors of robust standard errors from the coeftest output
se.model1 <- ctdf(coeftest(mod1, vcov=vcovHC))[,"Std. Error"]
se.model2 <- ctdf(coeftest(model2, vcov=vcovHC))[,"Std. Error"]
se.model3 <- ctdf(coeftest(model3, vcov=vcovHC))[,"Std. Error"]
# Pass the standard errors into stargazer
stargazer(mod1, model2, model3, type = "text", omit.stat = "f",
se = list(se.model1, se.model2, se.model3),
star.cutoffs = c(0.05, 0.01, 0.001))
